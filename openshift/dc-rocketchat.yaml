kind: Template
apiVersion: v1
metadata:
  name: rocketchat
  annotations:
    description: "Rocketchat with replication for Cailey's code test."

objects:

  ## deployment config for HA rocketchat instance.
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${{APPLICATION_NAME}}"
      name: "${{APPLICATION_NAME}}"
    spec:
      strategy:
        type: Rolling
      triggers:
      - type: ConfigChange
      replicas: "${{ROCKETCHAT_REPLICAS}}"
      selector:
        app: "${{APPLICATION_NAME}}"
        deploymentConfig: "${{APPLICATION_NAME}}"
      template:
        metadata:
          labels:
            app: "${{APPLICATION_NAME}}"
            deploymentConfig: "${{APPLICATION_NAME}}"
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - "${{APPLICATION_NAME}}"
                topologyKey: "kubernetes.io/hostname"
          containers:
          - env:
            - name: MONGO_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-url
                  name: "${{MONGODB_SECRET_NAME}}"
            - name: MONGO_OPLOG_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-oplog-url
                  name: "${{MONGODB_SECRET_NAME}}"
            envFrom:
              - configMapRef:
                  name: ${{APPLICATION_NAME}}-config
            image: "${{ROCKETCHAT_IMAGE_REGISTRY}}:${{ROCKETCHAT_IMAGE_TAG}}"
            imagePullPolicy: Always
            name: "${{APPLICATION_NAME}}"
            ports:
            - containerPort: 3000
              protocol: TCP
            livenessProbe:
              httpGet:
                path: /api/v1/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 120
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /api/v1/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 120
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 5
            resources:
              limits:
                cpu: "${{CPU_LIMIT}}"
                memory: "${{MEMORY_LIMIT}}"
              requests:
                memory: "${{MEMORY_REQUEST}}"
                cpu: "${{CPU_REQUEST}}"
          restartPolicy: Always
          terminationGracePeriodSeconds: 60
    status: {}

parameters:
  - name: APPLICATION_NAME
    displayName: Application Name
    required: true
    value: "rocketchat"

  - name: HOSTNAME_HTTPS
    description: Hostname serving the application
    displayName: Route Name
    required: true

  - name: ROCKETCHAT_IMAGE_REGISTRY
    displayName: Rocketchat Image Registry
    value: "docker.io/library/rocket.chat"
    required: true

  - name: ROCKETCHAT_IMAGE_TAG
    displayName: RocketChat Tag
    value: "latest"
    required: true

  - name: ROCKETCHAT_REPLICAS
    displayName: RocketChat Replicas
    value: "3"
    required: true

  - name: MEMORY_REQUEST
    displayName: Memory Request
    value: "512Mi"
    required: true

  - name: MEMORY_LIMIT
    displayName: Memory Limit
    value: "1Gi"
    required: true

  - name: CPU_REQUEST
    displayName: CPU Request
    value: "500m"
    required: true

  - name: CPU_LIMIT
    displayName: CPU Limit
    value: "2"
    required: true

  - name: MONGODB_SECRET_NAME
    displayName: MongoDB Secret
    description: Name of the Secret containing MongoDB Assets
    value: "mongodb"
    required: true
